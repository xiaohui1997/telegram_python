[uwsgi]
#python项目目录
chdir=/data/telegram_python
#虚拟环境(venv)
home = /data/telegram_python/ll_env
#主应用中的wsgi文件
#wsgi-file = ywzj.wsgi.py
#env=DJANGO_SETTINGS_MODULE=ywzj.settings
# 启动flask应用的文件名，不用加.py
module=main.wsgi:application
# 应用名，与我们hell
#callable=app
#master=true
# worker的进程个数
processes=4
chmod-socket=666
logfile-chmod=644
# uwsgi的进程名称前缀，启动后可通过ps -ef | grep HelloWorld查找到这个进程
procname-prefix-spaced=telegram
#py文件修改，自动加载，也就是设置热启动了
py-autoreload=1
#http=0.0.0.0:8833 #监听端口，测试时使用
socket=127.0.0.1:8833

; 代理静态资源：路径映射
#static-map = /static=/usr/local/nginx/ywzj/ywzj/static

# 退出uwsgi是否清理中间文件，包含pid、sock和status文件
vacuum=true
# socket文件，配置nginx时候使用
socket=/var/log/uwsgi/uwsgi.sock
# status文件，可以查看uwsgi的运行状态
stats=/var/log/uwsgi/uwsgi.status
# pid文件，通过该文件可以控制uwsgi的重启和停止
pidfile=/var/log/uwsgi/uwsgi.pid
# 设置后台模式，然后将日志输出到uwsgi.log。当调试时，可先注释掉此内容
daemonize=/var/log/uwsgi/uwsgi.log